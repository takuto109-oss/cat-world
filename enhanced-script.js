// Enhanced Cat Website Controller with Advanced Features\nclass EnhancedCatWebsiteController extends CatWebsiteController {\n    constructor() {\n        super();\n        this.initEnhancements();\n    }\n    \n    initEnhancements() {\n        // State management\n        this.isDarkMode = localStorage.getItem('darkMode') === 'true';\n        this.chatOpen = false;\n        this.fabsOpen = false;\n        this.notifications = JSON.parse(localStorage.getItem('notifications') || '[]');\n        \n        // Setup enhanced features\n        this.setupPreloader();\n        this.setupEnhancedFloatingActions();\n        this.setupChatWidget();\n        this.setupNotificationCenter();\n        this.setupDarkMode();\n        this.setupAccessibility();\n        this.setupParticleSystem();\n        this.setupSkeletonLoading();\n        this.setupScrollIndicator();\n        this.setupTooltips();\n        \n        // Load data with skeleton loading\n        this.showSkeletonLoading();\n        setTimeout(() => {\n            this.loadCatsData();\n            this.loadArticles();\n            this.loadProducts();\n            this.hideSkeletonLoading();\n        }, 1500);\n    }\n    \n    // プリローダー設定\n    setupPreloader() {\n        const preloader = document.getElementById('preloader');\n        if (preloader) {\n            setTimeout(() => {\n                preloader.classList.add('hidden');\n                document.body.classList.remove('loading');\n            }, 2000);\n        }\n    }\n    \n    // 強化されたフローティングアクション\n    setupEnhancedFloatingActions() {\n        const mainFab = document.getElementById('main-fab');\n        const floatingActions = document.querySelector('.floating-actions');\n        const backToTopFab = document.querySelector('.back-to-top-fab');\n        \n        // メインFABクリック\n        mainFab?.addEventListener('click', () => {\n            this.fabsOpen = !this.fabsOpen;\n            floatingActions.classList.toggle('active', this.fabsOpen);\n            mainFab.classList.toggle('active', this.fabsOpen);\n        });\n        \n        // 個別FABアクション\n        document.querySelectorAll('[data-action]').forEach(fab => {\n            fab.addEventListener('click', () => {\n                const action = fab.dataset.action;\n                this.handleFabAction(action);\n                \n                // FABメニューを閉じる\n                this.fabsOpen = false;\n                floatingActions.classList.remove('active');\n                mainFab.classList.remove('active');\n            });\n        });\n        \n        // バックトゥトップ表示制御\n        window.addEventListener('scroll', () => {\n            if (window.pageYOffset > 300) {\n                backToTopFab?.classList.add('show');\n            } else {\n                backToTopFab?.classList.remove('show');\n            }\n        });\n    }\n    \n    handleFabAction(action) {\n        switch(action) {\n            case 'search':\n                document.querySelector('.search-section')?.scrollIntoView({ behavior: 'smooth' });\n                document.getElementById('search-input')?.focus();\n                break;\n            case 'favorites':\n                if (this.db?.currentUser) {\n                    this.openMyPage();\n                } else {\n                    document.querySelector('.login-btn')?.click();\n                }\n                break;\n            case 'chat':\n                this.toggleChat();\n                break;\n            case 'darkmode':\n                this.toggleDarkMode();\n                break;\n            case 'top':\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n                break;\n        }\n    }\n    \n    // チャットウィジェット\n    setupChatWidget() {\n        const chatClose = document.querySelector('.chat-close');\n        const chatSend = document.getElementById('chat-send');\n        const chatInput = document.getElementById('chat-input');\n        const quickActions = document.querySelectorAll('.quick-action');\n        \n        chatClose?.addEventListener('click', () => this.toggleChat());\n        \n        chatSend?.addEventListener('click', () => this.sendMessage());\n        chatInput?.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') this.sendMessage();\n        });\n        \n        quickActions.forEach(btn => {\n            btn.addEventListener('click', () => {\n                const message = btn.dataset.message;\n                this.sendQuickMessage(message);\n            });\n        });\n        \n        // 自動応答システム\n        this.chatResponses = {\n            '健康': 'こんにちは！猫の健康について気になることがありましたら、オンライン相談サービスをご利用ください。経験豊富な獣医師がお答えします。',\n            'グッズ': 'おすすめの猫グッズをお探しですか？当サイトでは厳選された高品質な猫用品を取り揃えております。',\n            '予約': '予約サービスをご利用いただき、ありがとうございます。オンライン相談、グルーミング、ペットシッターサービスをご用意しております。'\n        };\n    }\n    \n    toggleChat() {\n        const chatWidget = document.getElementById('chat-widget');\n        this.chatOpen = !this.chatOpen;\n        chatWidget?.classList.toggle('show', this.chatOpen);\n        \n        if (this.chatOpen) {\n            document.getElementById('chat-input')?.focus();\n        }\n    }\n    \n    sendMessage() {\n        const input = document.getElementById('chat-input');\n        const message = input?.value.trim();\n        \n        if (!message) return;\n        \n        this.addChatMessage(message, 'user');\n        input.value = '';\n        \n        // 自動応答\n        setTimeout(() => {\n            const response = this.generateResponse(message);\n            this.addChatMessage(response, 'bot');\n        }, 1000);\n    }\n    \n    sendQuickMessage(message) {\n        this.addChatMessage(message, 'user');\n        \n        setTimeout(() => {\n            const response = this.generateResponse(message);\n            this.addChatMessage(response, 'bot');\n        }, 1000);\n    }\n    \n    addChatMessage(message, type) {\n        const messagesContainer = document.getElementById('chat-messages');\n        if (!messagesContainer) return;\n        \n        const messageDiv = document.createElement('div');\n        messageDiv.className = `message ${type}-message`;\n        \n        const avatar = type === 'bot' ? '🐱' : '👤';\n        const time = new Date().toLocaleTimeString('ja-JP', { hour: '2-digit', minute: '2-digit' });\n        \n        messageDiv.innerHTML = `\n            <div class=\"message-avatar\">${avatar}</div>\n            <div class=\"message-content\">\n                <p>${message}</p>\n                <span class=\"message-time\">${time}</span>\n            </div>\n        `;\n        \n        messagesContainer.appendChild(messageDiv);\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n    \n    generateResponse(message) {\n        const keywords = Object.keys(this.chatResponses);\n        const foundKeyword = keywords.find(keyword => message.includes(keyword));\n        \n        if (foundKeyword) {\n            return this.chatResponses[foundKeyword];\n        }\n        \n        const defaultResponses = [\n            'ありがとうございます！詳しい内容については、お問い合わせフォームからご連絡ください。',\n            'お役に立てるよう最善を尽くします。他にご質問はございませんか？',\n            'それについては専門スタッフが対応いたします。しばらくお待ちください。'\n        ];\n        \n        return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n    }\n    \n    // 通知センター\n    setupNotificationCenter() {\n        this.updateNotificationDisplay();\n        \n        // 新しい通知を定期的に追加（デモ）\n        setInterval(() => {\n            if (Math.random() < 0.1) { // 10%の確率\n                this.addNotification();\n            }\n        }, 60000); // 60秒ごと\n        \n        // クリアボタン\n        document.getElementById('clear-notifications')?.addEventListener('click', () => {\n            this.notifications = [];\n            localStorage.removeItem('notifications');\n            this.updateNotificationDisplay();\n        });\n    }\n    \n    addNotification() {\n        const notificationTypes = [\n            { icon: 'fa-heart', text: '新しいお気に入りが追加されました', color: 'text-red' },\n            { icon: 'fa-star', text: 'おすすめの記事があります', color: 'text-yellow' },\n            { icon: 'fa-shopping-bag', text: '新商品が入荷しました', color: 'text-green' },\n            { icon: 'fa-calendar', text: '予約の確認が必要です', color: 'text-blue' }\n        ];\n        \n        const notification = notificationTypes[Math.floor(Math.random() * notificationTypes.length)];\n        notification.time = new Date().toISOString();\n        notification.id = Date.now();\n        \n        this.notifications.unshift(notification);\n        this.notifications = this.notifications.slice(0, 10); // 最新10件のみ保持\n        \n        localStorage.setItem('notifications', JSON.stringify(this.notifications));\n        this.updateNotificationDisplay();\n        \n        // 通知バッジ表示\n        this.showNotificationBadge();\n    }\n    \n    updateNotificationDisplay() {\n        const notificationsList = document.getElementById('notifications-list');\n        if (!notificationsList) return;\n        \n        if (this.notifications.length === 0) {\n            notificationsList.innerHTML = '<div class=\"no-notifications\" style=\"padding: 2rem; text-align: center; color: #9ca3af;\">通知はありません</div>';\n            return;\n        }\n        \n        notificationsList.innerHTML = this.notifications.map(notification => `\n            <div class=\"notification-item\" data-id=\"${notification.id}\">\n                <div class=\"notification-icon\">\n                    <i class=\"fas ${notification.icon} ${notification.color}\"></i>\n                </div>\n                <div class=\"notification-content\">\n                    <p>${notification.text}</p>\n                    <span class=\"notification-time\">${this.formatTime(notification.time)}</span>\n                </div>\n            </div>\n        `).join('');\n    }\n    \n    formatTime(timeString) {\n        const time = new Date(timeString);\n        const now = new Date();\n        const diff = now - time;\n        \n        if (diff < 60000) return 'たった今';\n        if (diff < 3600000) return `${Math.floor(diff / 60000)}分前`;\n        if (diff < 86400000) return `${Math.floor(diff / 3600000)}時間前`;\n        return `${Math.floor(diff / 86400000)}日前`;\n    }\n    \n    showNotificationBadge() {\n        // 通知バッジの実装（FABに赤い点を表示）\n        const chatFab = document.querySelector('.chat-fab');\n        if (chatFab && !chatFab.querySelector('.notification-badge')) {\n            const badge = document.createElement('div');\n            badge.className = 'notification-badge';\n            badge.style.cssText = `\n                position: absolute;\n                top: -5px;\n                right: -5px;\n                width: 12px;\n                height: 12px;\n                background: #ef4444;\n                border-radius: 50%;\n                animation: pulse 2s infinite;\n            `;\n            chatFab.style.position = 'relative';\n            chatFab.appendChild(badge);\n            \n            setTimeout(() => badge.remove(), 5000);\n        }\n    }\n    \n    // ダークモード\n    setupDarkMode() {\n        if (this.isDarkMode) {\n            document.body.classList.add('dark-mode');\n            this.updateDarkModeIcon(true);\n        }\n    }\n    \n    toggleDarkMode() {\n        this.isDarkMode = !this.isDarkMode;\n        document.body.classList.toggle('dark-mode', this.isDarkMode);\n        localStorage.setItem('darkMode', this.isDarkMode);\n        \n        this.updateDarkModeIcon(this.isDarkMode);\n        \n        // 通知表示\n        if (typeof this.showNotification === 'function') {\n            this.showNotification(\n                this.isDarkMode ? 'ダークモードに切り替えました' : 'ライトモードに切り替えました',\n                'info'\n            );\n        }\n    }\n    \n    updateDarkModeIcon(isDark) {\n        const darkModeFab = document.querySelector('.dark-mode-fab i');\n        if (darkModeFab) {\n            darkModeFab.className = isDark ? 'fas fa-sun' : 'fas fa-moon';\n        }\n    }\n    \n    // パーティクルシステム\n    setupParticleSystem() {\n        const canvas = document.getElementById('particles-canvas');\n        if (!canvas) return;\n        \n        const ctx = canvas.getContext('2d');\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        \n        const particles = [];\n        const particleCount = 30;\n        \n        for (let i = 0; i < particleCount; i++) {\n            particles.push({\n                x: Math.random() * canvas.width,\n                y: Math.random() * canvas.height,\n                vx: (Math.random() - 0.5) * 1,\n                vy: (Math.random() - 0.5) * 1,\n                size: Math.random() * 2 + 1,\n                opacity: Math.random() * 0.3 + 0.1\n            });\n        }\n        \n        const animate = () => {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            particles.forEach(particle => {\n                particle.x += particle.vx;\n                particle.y += particle.vy;\n                \n                if (particle.x < 0) particle.x = canvas.width;\n                if (particle.x > canvas.width) particle.x = 0;\n                if (particle.y < 0) particle.y = canvas.height;\n                if (particle.y > canvas.height) particle.y = 0;\n                \n                ctx.beginPath();\n                ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n                ctx.fillStyle = `rgba(255, 255, 255, ${particle.opacity})`;\n                ctx.fill();\n            });\n            \n            requestAnimationFrame(animate);\n        };\n        \n        animate();\n        \n        window.addEventListener('resize', () => {\n            canvas.width = window.innerWidth;\n            canvas.height = window.innerHeight;\n        });\n    }\n    \n    // スケルトンローディング\n    setupSkeletonLoading() {\n        this.skeletonTemplates = {\n            catCard: `\n                <div class=\"cat-card skeleton-card skeleton\" style=\"height: 400px;\"></div>\n            `,\n            articleCard: `\n                <div class=\"article-card\">\n                    <div class=\"skeleton skeleton-card\" style=\"height: 200px;\"></div>\n                    <div style=\"padding: 1rem;\">\n                        <div class=\"skeleton skeleton-text\" style=\"height: 1.5rem; margin-bottom: 1rem;\"></div>\n                        <div class=\"skeleton skeleton-text\"></div>\n                        <div class=\"skeleton skeleton-text\"></div>\n                        <div class=\"skeleton skeleton-text\" style=\"width: 60%;\"></div>\n                    </div>\n                </div>\n            `,\n            productCard: `\n                <div class=\"product-card\">\n                    <div class=\"skeleton skeleton-card\" style=\"height: 200px;\"></div>\n                    <div style=\"padding: 1rem;\">\n                        <div class=\"skeleton skeleton-text\" style=\"height: 1.2rem; margin-bottom: 0.5rem;\"></div>\n                        <div class=\"skeleton skeleton-text\" style=\"height: 1.5rem; width: 40%; margin-bottom: 1rem;\"></div>\n                        <div class=\"skeleton skeleton-text\"></div>\n                        <div class=\"skeleton skeleton-text\" style=\"width: 80%;\"></div>\n                    </div>\n                </div>\n            `\n        };\n    }\n    \n    showSkeletonLoading() {\n        const catsGrid = document.getElementById('cats-grid');\n        const articlesGrid = document.getElementById('articles-grid');\n        const productsGrid = document.getElementById('products-grid');\n        \n        if (catsGrid) {\n            catsGrid.innerHTML = Array(6).fill(this.skeletonTemplates.catCard).join('');\n        }\n        \n        if (articlesGrid) {\n            articlesGrid.innerHTML = Array(4).fill(this.skeletonTemplates.articleCard).join('');\n        }\n        \n        if (productsGrid) {\n            productsGrid.innerHTML = Array(6).fill(this.skeletonTemplates.productCard).join('');\n        }\n    }\n    \n    hideSkeletonLoading() {\n        // スケルトンは実際のコンテンツで置き換えられるため、特別な処理は不要\n    }\n    \n    // スクロールインジケーター\n    setupScrollIndicator() {\n        const indicator = document.getElementById('scroll-indicator');\n        \n        window.addEventListener('scroll', () => {\n            const winScroll = document.body.scrollTop || document.documentElement.scrollTop;\n            const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;\n            const scrolled = (winScroll / height) * 100;\n            \n            if (indicator) {\n                indicator.style.width = scrolled + '%';\n            }\n        });\n    }\n    \n    // ツールチップ\n    setupTooltips() {\n        const tooltip = document.getElementById('tooltip');\n        \n        document.addEventListener('mouseenter', (e) => {\n            if (e.target.hasAttribute('title') || e.target.hasAttribute('data-tooltip')) {\n                const text = e.target.getAttribute('title') || e.target.getAttribute('data-tooltip');\n                if (text && tooltip) {\n                    tooltip.textContent = text;\n                    tooltip.classList.add('show');\n                    e.target.removeAttribute('title'); // ブラウザデフォルトのツールチップを無効化\n                }\n            }\n        }, true);\n        \n        document.addEventListener('mouseleave', () => {\n            tooltip?.classList.remove('show');\n        }, true);\n        \n        document.addEventListener('mousemove', (e) => {\n            if (tooltip?.classList.contains('show')) {\n                tooltip.style.left = e.clientX + 'px';\n                tooltip.style.top = (e.clientY - 40) + 'px';\n            }\n        });\n    }\n    \n    // アクセシビリティ\n    setupAccessibility() {\n        // フォーカス管理\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Tab') {\n                document.body.classList.add('focus-visible');\n            }\n        });\n        \n        document.addEventListener('mousedown', () => {\n            document.body.classList.remove('focus-visible');\n        });\n        \n        // 動きを減らす設定の検出\n        if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {\n            document.body.classList.add('reduced-motion');\n        }\n        \n        // スクリーンリーダー用のライブリージョン\n        const liveRegion = document.createElement('div');\n        liveRegion.setAttribute('aria-live', 'polite');\n        liveRegion.setAttribute('aria-atomic', 'true');\n        liveRegion.className = 'sr-only';\n        liveRegion.id = 'live-region';\n        document.body.appendChild(liveRegion);\n        \n        this.liveRegion = liveRegion;\n    }\n    \n    // ライブリージョンに通知\n    announceToScreenReader(message) {\n        if (this.liveRegion) {\n            this.liveRegion.textContent = message;\n            setTimeout(() => {\n                this.liveRegion.textContent = '';\n            }, 1000);\n        }\n    }\n}\n\n// Replace the original controller\ndocument.addEventListener('DOMContentLoaded', () => {\n    new EnhancedCatWebsiteController();\n});